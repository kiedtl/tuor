(use* core)
(use* varvara)

(use std)
(use alloc)
(use vec)
(use net)

(use src/assets)

(let buf (Of vec/Vector U8))

(word main ( -- ) [
	[ ( -- ) halt ] .Screen/vector deo
	[ (--) on-mouse halt ] .Mouse/vector deo

	0xf07fs .System/r deo
	0xf0e0s .System/g deo
	0xf0c0s .System/b deo
	100s 8s * .Screen/width deo
	70s 8s * .Screen/height deo

	alloc/init

	(let conn net/ConnectArgs)
	"geminiprotocol.net" @conn :host <-
	1965s @conn :port <-
	@conn .Net/connect deo
	.Net/status dei "connection status: " print-string (as I8) print-dec nl

	"gemini://geminiprotocol.net/\r\n"
		dup std/strlen .Net/length deo
		.Net/send deo
	.Net/status dei (as I8) "send status: " print-string print-dec nl

	4096s @buf ;init-sized

	(let tmpbuf [U8 4096s]) // TODO: optimize, append to buf directly

	.Net/status dei
	(until [ .Status/ok <> ] [
		drop

		4096s .Net/length deo // Need (len) builtin?
		@tmpbuf .Net/recv deo
		.Net/length dei
			dup @buf ;ensure-capacity
			// TODO: add append-slice (append-chunk?) to std
			dup
				@buf :len -> @buf :items -> :
					@tmpbuf swap std/memcpy drop
				@buf :len tuck -> + swap <-

		.Net/status dei
	])
	drop

	draw
])

(word draw (--) [
	draw-mouse
	draw-text
])

(word draw-text (--) [
	0x1 .Screen/auto deo
	0s .Screen/x deo
	0s .Screen/y deo

	(word next-line (--) [
		0s .Screen/x deo
		.Screen/y dei 12s + .Screen/y deo
	])

	@buf :items ->
	ldak
	(while [ 0<> ] [
		.Screen/width dei 8s - .Screen/x dei <
			(when [ next-line ])

		// TODO: allow '\n' and '\t' literal
		(cond
			[ 0x0A = ] [ drop next-line ]
			[ 0x09 = ] [ drop 0x20 draw-char ]
			[ draw-char ]
		)

		1+ ldak
	])
	2drop
])

(word set-glyph-addr (U8 -- ) [
	32 - @FONT : .Screen/addr deo
])

(word draw-char (U8 -- ) [
	set-glyph-addr
	0x01 .Screen/sprite deo
])

(word draw-char-inverse (U8 -- ) [
	set-glyph-addr
	0x04 .Screen/sprite deo
])

(word draw-mouse ( -- ) [
	(let oldx U16)
	(let oldy U16)

	0x0 .Screen/auto deo

	$oldx .Screen/x deo
	$oldy .Screen/y deo
	@MOUSE .Screen/addr deo
	0x40 .Screen/sprite deo

	.Mouse/x dei dup @oldx <- .Screen/x deo
	.Mouse/y dei dup @oldy <- .Screen/y deo

	0x41 .Screen/sprite deo
])

(word on-frame ( -- ) [ ])

(word on-mouse ( -- ) [
	.Mouse/state dei 0= (when [
		draw
	] [
		// Button press
	])
])

(struct Sprite8 [data [U8 8]])

// Taken from left
(let MOUSE Sprite8 [
	0x80c0s 0xe0f0s 0xf8e0s 0x1000s
])

// atari8
(let FONT [Sprite8] [
	0x0000s 0x0000s 0x0000s 0x0000s 0x6060s 0x6060s 0x6000s 0x6000s
	0x6666s 0x6600s 0x0000s 0x0000s 0x006cs 0xfe6cs 0x6cfes 0x6c00s
	0x183es 0x603cs 0x067cs 0x1800s 0x0066s 0x6c18s 0x3066s 0x4600s
	0x386cs 0x3870s 0xdeccs 0x7600s 0x6060s 0x6000s 0x0000s 0x0000s
	0x1c30s 0x3030s 0x3030s 0x1c00s 0x380cs 0x0c0cs 0x0c0cs 0x3800s
	0x0066s 0x3cffs 0x3c66s 0x0000s 0x0018s 0x187es 0x1818s 0x0000s
	0x0000s 0x0000s 0x0030s 0x3060s 0x0000s 0x007es 0x0000s 0x0000s
	0x0000s 0x0000s 0x0018s 0x1800s 0x0306s 0x0c18s 0x3060s 0xc000s
	0x3c66s 0x6e76s 0x6666s 0x3c00s 0x1838s 0x1818s 0x1818s 0x7e00s
	0x3c66s 0x060cs 0x1830s 0x7e00s 0x7e0cs 0x180cs 0x0666s 0x3c00s
	0x0c1cs 0x3c6cs 0x7e0cs 0x0c00s 0x7e60s 0x7c06s 0x0666s 0x3c00s
	0x3c60s 0x607cs 0x6666s 0x3c00s 0x7e06s 0x0c18s 0x3030s 0x3000s
	0x3c66s 0x663cs 0x6666s 0x3c00s 0x3c66s 0x663es 0x060cs 0x3800s
	0x0018s 0x1800s 0x0018s 0x1800s 0x0018s 0x1800s 0x1818s 0x3000s
	0x0c18s 0x3060s 0x3018s 0x0c00s 0x0000s 0x7e00s 0x007es 0x0000s
	0x3018s 0x0c06s 0x0c18s 0x3000s 0x3c66s 0x060cs 0x1800s 0x1800s
	0x3c66s 0x6e6as 0x6e60s 0x3e00s 0x183cs 0x6666s 0x7e66s 0x6600s
	0x7c66s 0x667cs 0x6666s 0x7c00s 0x3c66s 0x6060s 0x6066s 0x3c00s
	0x786cs 0x6666s 0x666cs 0x7800s 0x7e60s 0x607cs 0x6060s 0x7e00s
	0x7e60s 0x607cs 0x6060s 0x6000s 0x3e60s 0x606es 0x6666s 0x3e00s
	0x6666s 0x667es 0x6666s 0x6600s 0x3c18s 0x1818s 0x1818s 0x3c00s
	0x3e06s 0x0606s 0x0666s 0x3c00s 0x666cs 0x7870s 0x786cs 0x6600s
	0x6060s 0x6060s 0x6060s 0x7e00s 0xc6ees 0xfed6s 0xc6c6s 0xc600s
	0x6676s 0x7e7es 0x6e66s 0x6600s 0x3c66s 0x6666s 0x6666s 0x3c00s
	0x7c66s 0x667cs 0x6060s 0x6000s 0x3c66s 0x6666s 0x766cs 0x3600s
	0x7c66s 0x667cs 0x6c66s 0x6600s 0x3c66s 0x603cs 0x0666s 0x3c00s
	0x7e18s 0x1818s 0x1818s 0x1800s 0x6666s 0x6666s 0x6666s 0x3e00s
	0x6666s 0x6666s 0x663cs 0x1800s 0xc6c6s 0xc6d6s 0xfeees 0xc600s
	0x6666s 0x3c18s 0x3c66s 0x6600s 0x6666s 0x663cs 0x1818s 0x1800s
	0x7e06s 0x0c18s 0x3060s 0x7e00s 0x3c30s 0x3030s 0x3030s 0x3c00s
	0xc060s 0x3018s 0x0c06s 0x0300s 0x3c0cs 0x0c0cs 0x0c0cs 0x3c00s
	0x1038s 0x6cc6s 0x0000s 0x0000s 0x0000s 0x0000s 0x0000s 0xfe00s
	0x0060s 0x3018s 0x0000s 0x0000s 0x0000s 0x3c06s 0x3e66s 0x3e00s
	0x6060s 0x7c66s 0x6666s 0x7c00s 0x0000s 0x3c60s 0x6060s 0x3c00s
	0x0606s 0x3e66s 0x6666s 0x3e00s 0x0000s 0x3c66s 0x7e60s 0x3c00s
	0x1c30s 0x7c30s 0x3030s 0x3000s 0x0000s 0x3e66s 0x663es 0x067cs
	0x6060s 0x7c66s 0x6666s 0x6600s 0x1800s 0x3818s 0x1818s 0x3c00s
	0x1800s 0x1818s 0x1818s 0x1870s 0x6060s 0x666cs 0x786cs 0x6600s
	0x3818s 0x1818s 0x1818s 0x3c00s 0x0000s 0xecfes 0xd6c6s 0xc600s
	0x0000s 0x7c66s 0x6666s 0x6600s 0x0000s 0x3c66s 0x6666s 0x3c00s
	0x0000s 0x7c66s 0x6666s 0x7c60s 0x0000s 0x3e66s 0x6666s 0x3e06s
	0x0000s 0x7c66s 0x6060s 0x6000s 0x0000s 0x3e60s 0x3c06s 0x7c00s
	0x0018s 0x7e18s 0x1818s 0x0e00s 0x0000s 0x6666s 0x6666s 0x3e00s
	0x0000s 0x6666s 0x663cs 0x1800s 0x0000s 0xc6c6s 0xd67cs 0x6c00s
	0x0000s 0x663cs 0x183cs 0x6600s 0x0000s 0x6666s 0x663es 0x067cs
	0x0000s 0x7e0cs 0x1830s 0x7e00s 0x1c30s 0x3060s 0x3030s 0x1c00s
	0x1818s 0x1818s 0x1818s 0x1818s 0x380cs 0x0c06s 0x0c0cs 0x3800s
	0x0000s 0x60f2s 0x9e0cs 0x0000s 0x3c42s 0x9985s 0x8599s 0x423cs
])
