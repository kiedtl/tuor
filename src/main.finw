(use* core)
(use* varvara)

(use std)
(use alloc)
(use vec)
(use net)

(use assets)

(enum Mode U8
	norm
	sel-link
)

(struct Link
	[url @U8]
)

(enum LineType U8
	[status   0]
	[heading  1]
	[text     2]
	[link     3]
	// list
	// quote
	// pre
)

(struct Line
	[type LineType]
	[data  @Opaque] // TODO: untagged unions
	[line      @U8]
)

(word STARTX (-- U16) [ 16s ])
(word ENDX (-- U16) [ .Screen/width dei 16s - ])
(word STARTY (-- U16) [ 16s ])
(word ENDY (-- U16) [ .Screen/height dei 16s - ])

(let ui-mode Mode)
(let ui-sel-link @[U8 3])
(let ui-current-font @U8)

(let conn net/ConnectArgs)
(let buf (Of vec/Vector U8))
(let document (Of vec/Vector Line))
(let links (Of vec/Vector Link))

(word main ( -- ) [
	[ (--) on-mouse      halt ] .Mouse/vector deo
	[ (--) on-controller halt ] .Controller/vector deo // TODO: bad folding!

	.Mode/norm @ui-mode <-

	alloc/init
	4096s @buf ;init-sized
	256s @document ;init-sized
	64s @links ;init-sized

	0xf07fs .System/r deo
	0xf0e0s .System/g deo
	0xf0c0s .System/b deo
	70s 8s * .Screen/width deo
	90s 8s * .Screen/height deo

	"gemini://geminiprotocol.net/" make-request
	parse-buf
	draw
])

// TODO: factor out "first-non-space"
//
(word parse-buf ( -- ) [
	0s @document ;shrink-to
	0s @links ;shrink-to

	(let line-start @U8)

	// (newline-addr -- )
	(word process-line (@U8 -- ) [
		// Change the newline to a NUL
		0 swap-sb <-
		$line-start
		(cond
			[ (-- Bool) @document :len -> 0= ] [
				0s (as @Opaque) .LineType/status
			]
			[ -> '# = ] [
				(r 0) // Heading level ctr
				(until [ (-- Bool) ldak '# <> ] [ 1+ (r 1+) ])

				// Advance past space
				ldak 0x20 = (when [ 1+ ])
				(r move) (as @Opaque) .LineType/heading
			]
			[ "=>" std/strstartequ ] [
				// Move past "=>" and spacing
				1+ 1+
				(until [ (-- Bool) ldak 0x20 <> ] [ 1+ ])

				// Separate URL and text
				dup
				(until [ (-- Bool) ldak is-whitespace ] [ 1+ ])
				dup 0 swap-sb <- // TODO: optimize <value> <swap-sb> <-
				                 // to (r val) move (r <-)
				1+

				// Move past spaces again (text)
				(while [ (-- Bool) ldak is-whitespace ] [ 1+ ])
				swap
				@links ;add-one
				@links ;last-ptr
					:url <-

				@links :len -> 1- (as @Opaque)
				.LineType/link
			]
			[ 0s (as @Opaque) .LineType/text ]
		)
		@document ;add-return move
			(r copy) :type <-
			(r copy) :data <-
			(r move) :line <-
	])

	@buf :items ->
	dup @line-start <-
	ldak
	(while [ 0<> ] [
		0x0A = (when [
			dup process-line
			dup 1+ @line-start <-
		])
		1+ ldak
	]) 2drop
])

// Check if URL is relative or not, then make request.
//
// (link-url -- )
(word goto (@U8 -- ) [
	dup "http" std/strstartequ (when [
		"Can't follow HTTP/S link" print-string nl
		drop return
	])

	dup "gemini://" std/strstartequ not (when [
		(let urlbuf [U8 64])
		0 64s @urlbuf std/memset8
		"gemini://" @urlbuf std/strcpy
		@conn :host -> swap std/strcpy
		"/" swap std/strcpy
		std/strcpy drop
		@urlbuf (as @U8)
	])

	alloc/defrag
	make-request
	parse-buf
	render
])

// ( url -- )
(word make-request (@U8 -- ) [
	0s @buf ;shrink-to

	dup parse-url

	@conn :host <-
	1965s @conn :port <-
	@conn .Net/connect deo

	.Net/status dei .Status/ok <> (when [
		drop
		"Connection failed!" print-string nl
		"Error code: " print-string
			.Net/status dei (as I8) print-dec
			nl
		return
	])

	dup std/strlen .Net/length deo
		.Net/send deo
	2s .Net/length deo
		"\r\n" .Net/send deo

	.Net/status dei .Status/ok <> (when [
		"Request failed!" print-string nl
		"Error code: " print-string
			.Net/status dei (as I8) print-dec
			nl
		return
	])

	(until [ ( -- Bool) .Net/status dei .Status/ok <> ] [
		@buf :len -> 1024s + @buf ;try-ensure-capacity
			not (when [
				"Out of memory! Try using a real Gemini client." print-string nl
				"(Tried to allocate " print-string
						@buf :len -> print-dec
						" + 256 bytes)" print-string
						nl
				return
			])
		1024s .Net/length deo
		@buf :len -> @buf :items -> + .Net/recv deo
		.Net/length dei @buf :len -> + @buf :len <-
	])

	0 .Net/close deo
])

(word draw (--) [
	draw-mouse
	render
])

(word render (--) [
	@assets/FONT-NORM @ui-current-font <-

	0x15 .Screen/auto deo
	STARTX .Screen/x deo
	STARTY .Screen/y deo

	@document :items ->
	@document :len ->
	0s
	(until [ (U16 U16 -- Bool) = ] [
		// items len ind
		rot 2dup :
		// len ind items ptr
		(as @Line) // FIXME: shouldn't be necessary, : should cast for us
		dup :type ->
			(cond
				[ .LineType/heading = ] [
					@assets/FONT-FAT @ui-current-font <-

					// TODO: optimize: if every cond branch body starts
					// with "DROP", then dup'ing isn't necessary for last
					// branch
					//
					drop
					dup :data -> (as U8)
					(until [ 0= ] [
						1- "#" draw-text
					])
					" " draw-text
					drop
				]
				[ .LineType/link = ] [
					drop
					"[" draw-text
					(let b @[U8 3])
					dup :data -> (as U8) @b link-index-to-keyset draw-text
					"] " draw-text
				]
				// TODO: language: continue
				// [ .LineType/status = ] [ continue ]
				[ drop ]
			)

		dup :line ->
			draw-text
			draw-next-line

		:type ->
			(cond
				[ .LineType/heading = ] [
					@assets/FONT-NORM @ui-current-font <-
				]
			)
			drop

		// len ind items
		rot>
		// items len ind
		1+
	])
	3drop
])

(let last-space @U8)
(let last-space-screenx U16)

(word draw-next-line (--) [
	0 // Dummy value // TODO
	(while [ (-- Bool) .Screen/width dei .Screen/x dei > ] [
		0x20 draw-char
	])
	drop // Dummy value

	STARTX .Screen/x deo
	0s @last-space-screenx <-
	.Screen/y dei 16s + .Screen/y deo
])

(word draw-text (@U8 --) [
	dup @last-space <-
	0s @last-space-screenx <-

	copy
	ldak
	(while [ 0<> ] [
		ENDX .Screen/x dei <
			(when [
				$last-space

				// Ensure last whitespace wasn't beginning
				// of string
				dup (r copy) <>
				(when  [
					// Move past the actual space
					//
					// FIXME: handle multiple spaces in a row
					1+

					$last-space-screenx .Screen/x deo
					(while [ (-- Bool) .Screen/x dei .Screen/width dei < ] [
						0x20 draw-char
					])
					rot-sbs drop
					swap-bs
				] [
					// It's the beginning... nevermind!
					drop
				])

				draw-next-line

				// TODO: continue
				drop ldak
			])

		// Record if the current char is whitespace
		dup is-whitespace (when [
			over-sb @last-space <-
			.Screen/x dei @last-space-screenx <-
		])

		// TODO: allow '\n' and '\t' literal
		(cond
			[ 0x0A = ] [ drop draw-next-line ]
			[ 0x09 = ] [ drop 0x20 draw-char ]
			[ draw-char ]
		)

		1+ ldak
	])
	2drop
	(r drop)
])

// TODO: optimize when cond bodies are the same
// TODO: (or) builtin
(word is-whitespace (Char8 -- Bool) [
	// TODO: uncomment and test, should work
	// (too lazy to test now, in middle of other things)
	//
	//copy (r [ 0x0A = ])
	//copy (r [ 0x09 = or ])
	//move (r [ 0x20 = or ])
	//(r move)

	(cond
		[ 0x0A = ] [ t ]
		[ 0x09 = ] [ t ]
		[ 0x20 = ] [ t ]
		[ nil ]
	)
	nip
])

(word draw-char (U8 -- ) [
	(as U16) dup

	0x50 bsft 255s + $ui-current-font + .Screen/addr deo
	(r [ .Screen/x dei ]) // Save x position
	0x01 .Screen/sprite deo

	// Draw, then draw second sprite if width > 8
	$ui-current-font + -> (as U16)
	dup 8s > (when [
		0x01 .Screen/sprite deo
	])

	// Advance per glyph width
	(r move) + .Screen/x deo
])

(word draw-mouse ( -- ) [
	(let oldx U16)
	(let oldy U16)

	0x0 .Screen/auto deo

	$oldx .Screen/x deo
	$oldy .Screen/y deo
	@assets/MOUSE .Screen/addr deo
	0x40 .Screen/sprite deo

	.Mouse/x dei dup @oldx <- .Screen/x deo
	.Mouse/y dei dup @oldy <- .Screen/y deo

	0x41 .Screen/sprite deo
])

#inline
(word on-controller ( -- ) [
	$ui-mode
	(cond
		[ .Mode/norm = ] [
			.Controller/key dei
			(cond
				[ 'f = ] [
					.Mode/sel-link @ui-mode <-
					0 3s @ui-sel-link std/memset8 drop
				]
			)
		]
		[ .Mode/sel-link = ] [
			.Controller/key dei
				@ui-sel-link (as @U8)
					(while [ (-- Bool) ldak 0 <> ] [ 1+ ])
				<-
			// Sequence is "complete" if first char is 0..9 or has two chars
			@ui-sel-link (as @U8)
				dup :0 -> 'a < move
					:1 -> 0<> (r move) or
			(when [
				.Mode/norm @ui-mode <-
				@ui-sel-link keyset-to-link-index
				dup @links :len -> (as U8) >= (when [
					drop
					"No such link" print-string nl
				] [
					@links :items -> : (as @Link) :url ->
					goto
				])
			])
		]
	)
	drop
	halt
])

#inline
(word on-mouse ( -- ) [
	.Mouse/state dei 0= (when [
		draw-mouse
	] [
		// Button press
	])
])

// TODO: handle https://, gopher://, etc (will need strfind("://"))
// TODO: handle relative URLs
(word parse-url (@U8 -- @U8) [
	// TODO: ensure shadowing works correct, then rename this to "buf"
	(let mybuf [U8 32])

	// First move past the gemini://, if it's there
	dup "gemini://" std/strstartequ (when [
		ldak
		(until [ '/ = ] [
				drop 1+ ldak
		]) drop 1+ 1+
	])

	// Next, move into buffer so we can modify it
	// It's okay if stuff gets chopped off
	24s swap @mybuf std/memcpy
	dup 24s : 0 swap-sb <- // Set the NUL, just in case

	// Find the slash (or if it doesn't exist, the NUL
	ldak
	(until [ dup '/ = swap 0= or ] [
		drop 1+ ldak
	]) drop

	// Stop the string at the slash
	0 swap-sb <-

	@mybuf
	// TODO: should coerce
	(as @U8)
])
(test parse-url [
	"gemini://domain.com/foo/bar/baz.gmi" parse-url print-string
		(should stdout-eq "domain.com")

	"domain.com/foo/bar/baz.gmi" parse-url print-string
		(should stdout-eq "domain.com")

	"foo.domain.com" parse-url print-string
		(should stdout-eq "foo.domain.com")
])

(word link-index-to-keyset (U8 @[U8 3] -- @[U8 3]) [
	move (r dup)
	dup 10 / dup 0<> (when [ '` + (r copy) <- (r 1+) ] [ drop ])
	10 mod '0 + (r [ copy 1+ ]) <-
	0 (r move) <- // Nul terminator
	(r move)
])
(test link-index-to-keyset [
	(let b [U8 3]) // TODO: test shadowing and rename to buf
	 0 @b link-index-to-keyset print-string (should stdout-eq "0")
	 5 @b link-index-to-keyset print-string (should stdout-eq "5")
	25 @b link-index-to-keyset print-string (should stdout-eq "b5")
	52 @b link-index-to-keyset print-string (should stdout-eq "e2")
	70 @b link-index-to-keyset print-string (should stdout-eq "g0")
	 9 @b link-index-to-keyset print-string (should stdout-eq "9")
])

(word keyset-to-link-index (@[U8 3] -- U8) [
	copy -> dup 'a >= (when [ '` - 10 * (r 1+) ] [ drop 0 ])
	(r move) -> '0 - + (as U8)
])
(test link-index-to-keyset [
	 "0" keyset-to-link-index (should eq 0)
	"a8" keyset-to-link-index (should eq 18)
	"b1" keyset-to-link-index (should eq 21)
	 "8" keyset-to-link-index (should eq 8)
	"c0" keyset-to-link-index (should eq 30)
])
